/* Assembly 
.register_usage #3, hcany, chan;
;
bruh*/

ldr $r1, #0;
/* Constant 1 */
ldr $r2, #1;
/* Factorial iteration count */
ldr $r5, #16;

//                 Mask   Expected
#define OP_COND_AL 0b0000'0000
#define OP_COND_EQ 0b0001'0001
#define OP_COND_LT 0b0011'0010
#define OP_COND_NE 0b0001'0000
#define OP_COND_GT 0b0011'0000
#define OP_COND_GE (OP_COND_GT | OP_COND_EQ)
#define OP_COND_LE (OP_COND_LT | OP_COND_EQ)

// Flag register
0b0000
    ||
    |-- Equal
    |
    --- Less than

:loop:
:loopa:
  cmp $r1, $r0;
  b.ge =quit_benchmark_loop;
  /* Factorial result */
  ldr $r3, #1;
  /* Factorial iteration counter */
  ldr $r4, #0;
  :factorial_loop:
    cmp $r4, $r5;
    b.ge =quit_factorial_loop;
    mul $r3, $r3, $r4;
    add $r4, $r4, $r2;
  b =factorial_loop;
  :quit_factorial_loop:
add $r1, $r1, $r2;
b =loop;
:quit_benchmark_loop:

/* Return value to use is at r0 */ 
mov $r0, $r0;
ret;

ldr $r4, =test_proto;

.start_prototype test_proto;
  ldr $r0, "Hello World!1";
  ldr $r1, "Hello World!2";
  ldr $r2, "Hello World!3";
  .start_prototype test_proto_nest;
    ldr $r0, "Hello World!1";
    ldr $r1, "Hello World!2";
    ldr $r2, "Hello World!3";
  .end_prototype;
.end_prototype;

ldr $r3, =test_proto;
ldr $r1, "yay lets go1";
ldr $r1, "yay lets go2";
ldr $r2, #4294967296;





