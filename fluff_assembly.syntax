; EBNF grammar for fluff assembly
; Definition for some stuff in regex
; <digit> is `[0-9]`
; <letter> is `[a-zA-Z]`
; <any> is `.`
; <string-double> is `\"[^\"\n]+\"`
; <string-single> is `\'[^\'\n]+\'`

; Basic tokens (easy to lex)
<register> ::= "%r" { <digit> }+
<immediate> ::= "#" { <digit> }+
<ident> ::= <letter> { <letter> | 
                       <digit> | 
                       "_" | 
                       "@"
                     }+

<label_name> ::= <ident>

<label_decl> ::= <label_name> ":"
<string> ::= <string-double>
<labe_ref> ::= "=" <label_name>

<assembler_directive_name> ::= "." <ident>

; Non basic tokens (need parser not lexer)
<argument> ::= <register> |
               <immediate> |
               <label_ref> |
               <string>

<argument_list> ::= [ <argument> { , <argument> }* ]

<instruction> ::= <ident> <argument_list>
<assembler_directive> ::= <assembler_directive_name> <argument_list>

<label> ::= <label_name> ":"
<statement> ::= <instruction> |
                <assembler_directive> |
                <label_decl>

<main> ::= { <statement> ";" }*




